{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "produce_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "numberOfPortions",
						"type": "uint256"
					}
				],
				"name": "placeOrder",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "portions",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "portionsAgreed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "produce",
				"outputs": [
					{
						"internalType": "contract Produce",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rejectOrder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "submitOrder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawFunds",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"placeOrder(uint256)": {
					"details": "returns boolean flag variable representing whether the order has been sent",
					"params": {
						"numberOfPortions": "number of portions required for order"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"submitOrder()": {
					"details": "can only be called by the owner of the GroupOrder, this function also changes the state to closed"
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"placeOrder(uint256)": {
					"notice": "Function for User to pledge individual order to the group order"
				},
				"submitOrder()": {
					"notice": "Owner of the food proposal contract can submit order to Market if minimum order requirement is met"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/GroupOrder.sol": "GroupOrder"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
			"license": "MIT",
			"urls": [
				"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
				"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
			]
		},
		"@openzeppelin/contracts/proxy/Clones.sol": {
			"keccak256": "0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10",
			"license": "MIT",
			"urls": [
				"bzz-raw://4da0f451fe5aefdb95204dbec4a9448a8a2b00a444864bb5dbf7162da842a0f7",
				"dweb:/ipfs/QmYciAwNiJzgGMAqSTUANwMjy5HykNUvmkQ5PQhNTRqrB5"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"contracts/GroupOrder.sol": {
			"keccak256": "0xf7a089767bae7de5a0a4eb5ead2e460e088450ff023c85d09c8aed37e6c53d3e",
			"license": "UNLICENSD",
			"urls": [
				"bzz-raw://22c2fa0c3f6323f244c33eebef477f046455d4715c8858112edf59ace4d69fc8",
				"dweb:/ipfs/QmQGctM3fjmVdeSqggkaWFKRHN3NoTHQop2Qvp7c8wxxKR"
			]
		},
		"contracts/Market.sol": {
			"keccak256": "0x5bc0df34731d38674d242450beba5741042ad44b220891a472a27cda584cf5b6",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://56a9948afeab4dd8736bf31fcf6a809c07e266c98fc5a87d38e9a408fa643b2e",
				"dweb:/ipfs/QmeumVxD47qM7MMqbuScMXBzSH5xwnhWgKJx1Av44nbRJt"
			]
		},
		"contracts/Produce.sol": {
			"keccak256": "0x1f357eccc74a549534050771420d20c13b982281a499001bb2f36d2fd88167f9",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://65adc7d24a08dacccfb1985cf77a048d4bbdae3e73d1e6bd85fa435e7e7150b0",
				"dweb:/ipfs/QmX624UHdK9kJ931wbp6Dmb9faVEq6tDn3vgdCahe6qzfa"
			]
		}
	},
	"version": 1
}